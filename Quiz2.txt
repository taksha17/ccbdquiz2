
Name:Taksha
Last 4 digits ID:6312

CSE 6332, Cloud Computing					


Quiz Q2, Spring 2023   (c) DL, UTA, 2023


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")
    The cloud provider is MS Azure.

 5. Upload all data files (*jpg and *csv, not this quiz) to the cloud service.

 6. Please create a relational database (your choice which) from the .csv data on the cloud provider, you may do this manually 
    or in code, it is your choice.
  
 7. Please put your name and ID on each page you show for this quiz.

Show and submit code, when each part is complete, raise your hand and then show us:

For the following you may (if you wish) normalize all latitudes and longitudes to between 0 and 360 degrees, by adding 180 to all values.

 10. On a web page (interface) allow a user to enter a city name (for example Dallas) and (a) you show the city and state names, 
     population, lat and long. (b) Find and display any additional city within 100 km of that selection, you may show ANY city,
     if one exists.



 11. Allow a user to give a minimum latitude and longitude value set (X1,Y1) and a maximum latitude and longitude value set (X2,Y2)
     this creates a "bounding box" between those points. (It describes an area.)
     Then, for all of the cities within that bounding box, show the city and state names, the population and the latitude and longitude.

 12. The population of some states is growing. Allow a user to give either: (a) a bounding box (like the previous problem) -OR-
     (b) a State name (for example "Oklahoma") and for either case: three values: Min, Max and Inc (for example 183000, 185000, 2000) 
     and you will increment the population of each city (within that box or state name) with the population 
     between Min and Max by adding the Inc value (2000) (In this example there are two cities, add 2000 to the population for each.)
     Then list the cities, state, new population and lat, long for all that were modified.
     Also list the count of the number of cities modified.

 13. Allow a user to add a new City, State, Population, and latitude and longitude or to remove a City and State entry (tuple).

 14. In class, on your computer, please show us the application running and we will try it out. Only for parts 10, 11, 12, 13. 

 15. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.


class Form1(FlaskForm):
    City = StringField(label='Enter City Name: ', validators=[DataRequired()])
    submit = SubmitField(label='Submit')


@app.route('/form1', methods=['GET', 'POST'])
def form1():
    form = Form1()
    cnt = 0
    if form.validate_on_submit():
        try:
            conn = connection()
            cursor = conn.cursor()
            City = (form.City.data)
            if City == '':
                return render_template('form1.html', form=form, error="Please enter a valid city name", data=0)

            cursor.execute("SELECT * FROM city where City = ?", City)
            result = []
            while True:
                row = cursor.fetchone()
                if not row:
                    break
                result.append(row)
                cnt += 1
            return render_template('form1.html', result=result, cnt=cnt, City=City, form=form, data=1)

        except Exception as e:
            print(e)
            return render_template('form1.html', form=form, error="City Name not found", data=0)

    return render_template('form1.html', form=form)



class Form2(FlaskForm):
    lat1 = StringField(label='Enter Min latitude X1: ', validators=[DataRequired()])
    lat2 = StringField(label='Enter Max latitude X2: ', validators=[DataRequired()])
    lon1 = StringField(label='Enter min Longitude Y1: ', validators=[DataRequired()])
    lon2 = StringField(label='Enter max Longitude Y2: ', validators=[DataRequired()])
    state = StringField(label='Enter State Name: ', validators=[DataRequired()])
    min_pop = StringField(label='Enter Minimum Population: ', validators=[DataRequired()])
    max_pop = StringField(label='Enter Maximum Population: ', validators=[DataRequired()])
    inc_pop = StringField(label='Enter Population Increment: ', validators=[DataRequired()])
    submit = SubmitField(label='Submit')
@app.route('/form2', methods=['GET', 'POST'])
def form2():
    form = Form2()
    if form.validate_on_submit():
        try:
            conn = connection()
            cursor = conn.cursor()
            lat1 = float(form.lat1.data)
            lat2 = float(form.lat2.data)
            lon1 = float(form.lon1.data)
            lon2 = float(form.lon2.data)
            state = form.state.data
            min_pop = int(form.min_pop.data)
            max_pop = int(form.max_pop.data)
            inc_pop = int(form.inc_pop.data)
            
            cnt = 0
            R = 6373.0

            cursor.execute("SELECT * FROM city where lat BETWEEN ? AND ? AND lon BETWEEN ? AND ?", lat1, lat2, lon1, lon2)
            result = []
            while True:
                row = cursor.fetchone()
                if not row:
                    break
                result.append(row)
                cnt += 1
            
            # Filter cities by state name
            if state:
                result = [row for row in result if row[1] == state]

            modified_cities = []
            for row in result:
                city = row[0]
                state = row[1]
                population = row[2]
                lat = row[3]
                lon = row[4]

                if min_pop <= population <= max_pop:
                    new_population = population + inc_pop
                    modified_cities.append((city, state, new_population, lat, lon))
                    # Update the population in the database
                    cursor.execute("UPDATE city SET population = ? WHERE City = ? AND State = ?", new_population, city, state)

            conn.commit()  # Commit the changes to the database

            return render_template('form2.html', result=modified_cities, cnt=len(modified_cities), lat1=lat1, lon1=lon1, lat2=lat2, lon2=lon2, data=1)

        except Exception as e:
            print(e)
            return render_template('form2.html', form=form, error="Latitude must be in the [-90; 90] range, Latitude must be in [-180; 180], and all input must be numeric.")
    
    return render_template('form2.html', form=form, data=0)


#Search by Location


class Form3(FlaskForm):
    lat1 = StringField(label='Enter Min latitude X1: ', validators=[DataRequired()])
    lat2 = StringField(label='Enter Max latitude X2: ', validators=[DataRequired()])
    lon1 = StringField(label='Enter min Longitude Y1: ', validators=[DataRequired()])
    lon2 = StringField(label='Enter max Longitude Y2: ', validators=[DataRequired()])
    submit = SubmitField(label='Submit')


@app.route('/form3', methods=['GET', 'POST'])
def form3():
    form = Form3()
    if form.validate_on_submit():
        try:
            conn = connection()
            cursor = conn.cursor()
            lat1 = float(form.lat1.data)
            lat2 = float(form.lat2.data)
            lon1 = float(form.lon1.data)
            lon2 = float(form.lon2.data)

            bounding_box = {
                'lat_min': min(lat1, lat2),
                'lat_max': max(lat1, lat2),
                'lon_min': min(lon1, lon2),
                'lon_max': max(lon1, lon2)
            }

            cursor.execute("SELECT City, State, Population, lat, lon FROM city WHERE lat BETWEEN ? AND ? AND lon BETWEEN ? AND ?",
                           bounding_box['lat_min'], bounding_box['lat_max'], bounding_box['lon_min'], bounding_box['lon_max'])
            result = cursor.fetchall()
            cnt = len(result)

            return render_template('form3.html', result=result, cnt=cnt, lat1=lat1, lon1=lon1, lat2=lat2, lon2=lon2, data=1)

        except Exception as e:
            print(e)
            return render_template('form3.html', form=form,
                                   error="Latitude must be in the [-90; 90] range, Longitude must be in [-180; 180], and all input must be numeric.")
    
    return render_template('form3.html', form=form, data=0)



#Search by Clusters


@app.route('/form4', methods=['GET', 'POST'])
def form4():
    if request.method == 'POST':
        try:
            conn = connection()
            cursor = conn.cursor()
            clus = request.form['clus']
            cnt = 0

            cursor.execute("SELECT * FROM earthquake1 where type = ?", clus)
            result = []
            while True:
                row = cursor.fetchone()
                if not row:
                    break
                result.append(row)
                cnt += 1
            return render_template('form4.html', result=result, cnt=cnt, clus=clus, data=1)

        except Exception as e:
            print(e)
            return render_template('form4.html', error="Range 1 and Range 2 must be numeric, Range 1 > Range 2 and Days must be integer and less then 31.", data=0)

    return render_template('form4.html', data=0)


#Does given Magnitude occur more often at night?


@app.route('/form5', methods=['GET', 'POST'])
def form5():
    cnt = 0
    tot_cnt = 0
    try:
        conn = connection()
        cursor = conn.cursor()

        cursor.execute('select * from earthquake1 where mag > 4.0')
        result = []
        while True:
            row = cursor.fetchone()
            if not row:
                break
            hour = dt.strptime(row[0], '%Y-%m-%dT%H:%M:%S.%fZ').hour
            if hour > 18 or hour < 7:
                result.append(row)
                cnt += 1
            tot_cnt += 1
        return render_template('form5.html', result=result, cnt=cnt, tot_cnt=tot_cnt, data=1)

    except Exception as e:
        print(e)
        return render_template('form5.html', error="Magnitude must be numeric.", data=0)
    

class Add(FlaskForm):
    city = StringField(label='City:', validators=[DataRequired()])
    state = StringField(label='State:', validators=[DataRequired()])
    population = IntegerField(label='Population:', validators=[DataRequired()])
    latitude = StringField(label='Latitude:', validators=[DataRequired()])
    longitude = StringField(label='Longitude:', validators=[DataRequired()])

class Remove(FlaskForm):
    city = StringField(label='City:', validators=[DataRequired()])
    state = StringField(label='State:', validators=[DataRequired()])

@app.route('/add', methods=['GET', 'POST'])
def add_form():
    try:
        conn = connection()
        cursor = conn.cursor()
        if request.method == 'POST':
            city = request.form['city']
            state = request.form['state']
            population = int(request.form['population'])
            latitude = float(request.form['latitude'])
            longitude = float(request.form['longitude'])

            # Insert the new city entry into the database
            cursor.execute("INSERT INTO city (City, State, Population, lat, lon) VALUES (?, ?, ?, ?, ?)",
                           city, state, population, latitude, longitude)
            conn.commit()  # Commit the changes to the database

            return redirect(url_for('add_form'))  # Redirect to the add_form() route

        # return render_template('add.html', add_form=Add(), remove_form=Remove())  # Render the add.html template for GET requests
        # return render_template('add.html', add_form=Add(), remove_form=Remove(), form=form)
        return render_template('add.html', add_form=Add(), remove_form=Remove(), form=Add())


    except Exception as e:
        return render_template('add.html', add_form=Remove(), remove_form=Remove(), error=e)




@app.route('/remove', methods=['POST'])
def remove_form():
    try:
        conn = connection()
        cursor = conn.cursor()
        city = request.form['city']
        state = request.form['state']

        # Remove the city entry from the database
        cursor.execute("DELETE FROM city WHERE City = ? AND State = ?", city, state)
        conn.commit()  # Commit the changes to the database

        return redirect(url_for('remove_form'))
    except Exception as e:
        return render_template('remove.html', remove_form_errors=str(e))




if __name__ == "__main__":
    app.run(debug=True)
